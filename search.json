[{"title":"变量类型与计算","url":"/blog/2019/02/27/变量类型与计算/","content":"# 变量类型与计算\n## 题目\n1. typeof 能够得到哪些类型\n2. === 与 ==\n3. 内置函数\n4. 存储方式分为哪些\n5. 理解JSON\n\n## 知识点\n\n### 值类型 vs 引用类型 (按存储方式类型区分)\n\n- 值类型： 只进行值传递\n- 引用类型： 指针传递\n- object, function, array 都是引用类型\n- 引用类型可以无限扩展属性\n\n### typeof 运算符\n\n1. typeof 只能区分出值类型的具体类型\n\t- typeof undefined //  undefined\n\t- typeof ‘abc’ // string\n\t- typeof 123 // number\n\t- typeof true // boolean\n2. typeof引用类型中能区分出来function\n\t- typeof {} // object\n\t- typeof [] // object\n\t- typeof null // object\n\t- typeof console.log // function\n### 强制类型转换\n\n1. 字符串拼接\n\t- 100 + ’10’ // ‘10010’\n2. == 运算符\n\t- 100 == ‘100’ // true 100 -\\> ‘100’\n\t- 0 == ‘’ // true 0-\\> false  ‘’ -\\> false\n\t- null == undefined // true null -\\> false undefined -\\> false\n3. if 语句\n\t- b = 100 \n\t- if (b)  // true\n4. 逻辑运算\n\t-  10 && 0 // 0\n\t-  “” || “abc” // “abc”\n\t\n### === vs ==\n\n1. jQuery 中推荐的写法\n\t- obj.a == null\n\t- 相当于 obj.a == null || obj.a == undefined\n2. 其他地方全用 === \n\n### JS 内置函数 - 数据封装类对象\n\n- Object\n- Array\n- Boolean\n- Number\n- String\n- Function\n- Date\n- RegExp\n- Error\n\n### JSON \n\n- JSON 就是一个JS 的对象\n\n    ```js\n    JSON.stringify({a:10, b:10})\n    JSON.parse(\"{'a':10, 'b':10}\"}\n    ```\n","tags":["Javascript"]},{"title":"VSCode Plugins","url":"/blog/2019/02/15/VSCode-Plugins/","content":"\n## Theme\n- One Dark pro\n- vscode-icons\n\n## For JavaScript\n- Prettier\n- Intent 4-to-2\n- ESLint\n- Duplicate action\n- Bracket Pair Colorizer 2\n- Babel ES6/ES7\n- ES7 React/Redux/GraphQL/React-Native snippets\n- TODO Highlight\n- Debugger for Chrome\n\n## HTML & CSS\n-  IntelliSense for CSS class names\n- Auto Rename Tag\n- Open HTML in Default Browser\n\n## Docker\n- Docker\n\n## Code Sharing\n- [Visual Studio Live Share ][1]\n\n[1]:\thttps://visualstudio.microsoft.com/services/live-share/","tags":["Environment"]},{"title":"原型和原型链","url":"/blog/2019/02/14/原型和原型链/","content":"\n## 知识点\n1. 构造函数\n    *  函数名首字母大写\n    *  函数最后会默认 return this\n2. 构造函数扩展\n    *  var a = {} 其实是 var a = new Object()的语法糖\n    *  var a = [] 其实是 var a = new Array()的语法糖\n    *  function Foo(){...} 其实是 var Foo = new Function(...)的语法糖\n    *  使用instanceof判断一个函数是否是一个变量的构造函数\n    *  判断一个变量是否为数组： 变量 instanceof Array\n3. 原型规则\n    *  所有引用类型（数组，对象，函数），都具有对象特性，即可自由扩展属性（除了“null”）\n    *  所有引用类型，都具有__proto__属性（隐式原型），属性值是一个普通的对象\n    *  所有引用类型，都具有prototype属性（显式原型），属性值是一个普通的对象\n    *  所有引用类型，__proto__属性值指向他的构造函数的prototype的属性值\n    *  当试图得到一个对象的某个属性时，如果这个对象本身没有这个属性，那么会去他的__proto__属性（即它的构造函数的prototype）中寻找\n    \n        ```javascript\n        var obj = {};\n        obj.a = 100;\n        var arr = [];\n        arr.a = 100;\n        function fn(){}\n        fn.a = 100\n        \n        console.log(obj.__proto__) // {}\n        console.log(arr.__proto__) // []\n        console.log(fn.__proto__) // [Function]\n        console.log(fn.prototype) // fn {}\n        console.log(obj.__proto__ === Object.prototype) // true\n        ```\n    *  对象.hasOwnProperty(属性) 判断是否是对象自身属性\n4. 原型链\n    * 代码  \n    \n        ```javascript\n        function Foo(name){\n        this.name = name\n        }\n        Foo.prototype.alertName = function(){\n            console.log(this.name)\n        }\n        \n        var f = new Foo('chris')\n        f.printName = function(){\n            console.log(this.name)\n        }\n        f.printName()\n        f.alertName()\n        f.toString() // 在f.__proto__.__proto__中寻找\n        ```\n    * 原型链 \n    \n    ![Screen Shot 2018-10-30 at 16.07.12](https://lh3.googleusercontent.com/-O83_4vaZQPU/W9kZxOgpBLI/AAAAAAAATDM/h_TBc7IPf8gMbXcXFvu0W898Mybwo_hGACHMYCw/I/Screen%252BShot%252B2018-10-30%252Bat%252B16.07.12.png)\n   * instanceof 用于判断引用类型属于哪个构造方法\n   * f instanceof Foo 的判断逻辑：\n       * f的__proto__一层一层往上，能否对应到Foo.prototype \n       * 再试着判断f instanceof Object\n       \n## 解题\n1. 如何准确判断一个变量是数组\n\n    ```javascript \n    var arr = []\n    arr instanceof Array //true\n    typeof arr // object, typeof 无法判断是否是数组\n    ```\n2. 写一个原型链继承的例子\n    \n    ```javascript\n    function Elem(id){\n        this.elem = document.getElementById(id)\n    }\n    Elem.prototype.html = function (val){\n        var elem = this.elem\n        if (val){\n            elem.innerHTML = val\n            return this //链式操作\n        }else{\n            return elem.innerHTML\n        }\n    }\n    \n    \n    Elem.prototype.on = function(type, fn){\n        var elem = this.elem\n        elem.addEventListener(type, fn)\n    \n    }\n    var div1 = new Elem('div1')\n    console.log(div1.html())\n    //链式操作\n    div1.html('<p>hello</p>').on('click',function(){\n        alert('clicked')\n    })\n    ```\n3. 描述new一个对象的过程\n    *  创建一个新对象\n    *  this指向这个对象\n    *  执行代码，对this赋值\n    *  返回this\n  \n\n\n    \n    \n\n\n\n    ","tags":["Javascript"]},{"title":"作用域和闭包","url":"/blog/2019/02/14/作用域和闭包/","content":"\n## 知识点\n1. 执行上下文\n\t*   范围：一段script或者一个函数\n\t*   全局：变量定义，函数声明\n\t*   函数：变量定义，函数声明，this，arguments\n\t*   函数声明 vs 函数表达式\n\t*   如果使用函数表达式，必须在使用前赋值函数，否则会默认undefined\n\t\t```javascript\n\t\t//函数声明\n\t\tfunction f(){...}\n\t\t//函数表达式\n\t\tvar f = function(){...}\n\t\t```\n2. this\n\t* this要在执行时才能确认，定义时无法确认\n\t\t```javascript\n\t\tvar a = {\n\t\t    name:'A',\n\t\t    fn:function(){\n\t\t        console.log(this.name)\n\t\t    }\n\t\t}\n\t\ta.fn() // this == a \n\t\ta.fn.call({name:'B'}) // this == {name:'B'}\n\t\tvar fn1 = a.fn  // this == window\n\t\tfn1()\n\t\tfunction fn(){\n\t\t    console.log(this)\n\t\t}\n\t\tfn() // this == window\n\t\t        \n\t\t//call apply bind\n\t\tfunction fn1(name, age){\n\t\t    console.log(name)\n\t\t    console.log(this)\n\t\t}\n\t\tfn1.call({x:100}, 'chris', 20) //this = {x:100}\n\t\tfn1.apply({x：200}，['mike',25])\n\t\t//bind必须用函数表达式\n\t\tvar f2 = function(name, age){\n\t\t    console.log(name)\n\t\t    console.log(this)\n\t\t}.bind({y：200})\n\t\tfn2('chris', 20)//this == {y：200}\n\t\t```\n3. 作用域\n\t*   var: 没有块级作用域, 只有函数和全局作用域\n\t*   let: Block Scope（after ES2015）\n4. 作用域链\n\t* 自由变量: 当前作用域没有定义的变量\n\t* 获得自由变量的值，去父级作用域寻找（函数的父级作用域是函数定义时的作用域）\n5. 闭包\n\t* 函数返回一个函数\n\t* 使用场景：\n\t\t* 函数作为返回值\n\t\t* 函数作为参数传递\n\t```javascript\n\tfunction F1(){\n\t    var a = 100\n\t    return function(){\n\t        console.log(a)\n\t    }\n\t}\n\tvar f1 = F1()\n\tvar a = 200 //对f1里的a没有影响\n\tf1()// output 100\n\t```\n## 解题\n1. 说明this集中不同的使用场景\n\t* 作为构造函数执行\n\t* 作为对象属性执行\n\t* 作为普通函数执行\n\t* call apply bind\n\n2. 创建10个a标签 点击的时候弹出对应的序号\n\t```javascript\n\tvar i\n\tfor(i = 0; i < 10; i++){\n\t    //必须要新建函数,否则都是10\n\t    (function(i){\n\t        var a = document.createElement('a')\n\t        a.innerHTML = i + '<br>'\n\t        a.addEventListener('click',function(e){\n\t            e.preventDefault()\n\t            alert(i)\n\t        })\n\t        document.body.appendChild(a)\n\t    })(i)\n\t}\n\t```\n3. 实际开发中的闭包的应用\n\t```javascript\n\tfunction isFirstLoad(){\n\t    var _last = []\n\t    return function(id){\n\t        if (_last.indexOf(id) >= 0){\n\t            return false\n\t        }else{\n\t            _last.push(id)\n\t            return true\n\t        }\n\t    }\n\t}\n\t    \n\tvar firstLoad = isFirstLoad()\n\tconsole.log(firstLoad(10)) //T\n\tconsole.log(firstLoad(10)) //F\n\tconsole.log(firstLoad(20)) //T\n\t```","tags":["Javascript"]},{"title":"Golang notebook","url":"/blog/2019/02/14/Golang-notebook/","content":"## 变量定义\n1. var 变量名 变量类型 //可以默认为空\n\t```go\n\tvar a int // 0\n\tvar s string // \"\"\n\tvar b,c int = 3,4\n\t//集中定义\n\tvar (\n\t    b int = 3\n\t    c int = \"def\"\n\t)\n\t```\n2. 定义的变量必须使用\n3. 可以自动推断类型\n\n\t```go\n\tvar a, b, c = 3, true, \"def\"\n\t```\n4. 第一次定义可以使用:= (不可以在函数外使用)\n\t```go\n\ta, b, c := 3, true, \"def\"\n\t```\n## 内建变量类型\n1. bool, string\n2. (u)int (长度根据系统字节), (u)int8, (u)int16,(u)int32, (u)int64, uintptr\n3. byte, rune(go中的char, 32位)\n4. float32, float64, complex64(复数，实部32位，虚部32位), complex128\n\n\t```go\n\t   c := 3+4i\n\t   cmplx.Abs(c) // 5\n\t   cmplx.Pow(math.E, 1i*math.Pi)+1 // 0, 虚部会带有一个极小值偏差\n\t   cmplx.Exp(1i*math.Pi)+1 // 0 \n\t```\n\n5. 类型转换是强制的, 没有隐式转换\n\n\t```go\n\t   a, b := 3, 4\n\t   var c int\n\t   c = int(math.Sqrt(float64(a*a+b*b)))\n\t```\n\n## 常量与枚举\n1. 常量定义 const 常量名 （类型） = 值\n\n\t```go\n\t    const filename = \"test.txt\"\n\t    const(\n\t        a = 3\n\t        b = 4\n\t    ) \n\t```\n2. 常量不要随意大写\n3. 常量数值可作为任意数值类型使用\n4. 枚举\n\n\t```go\n\tconst(\n\t    cpp = iota // 0\n\t    _\n\t    python // 2\n\t    golang // 3\n\t    javascript //4 \n\t)\n\t// b, kb, mb, gb, tb, pb\n\tconst(\n\t    b = 1<<(10*iota) //itoa可作为自增值得的种子\n\t    kb\n\t    mb\n\t    gb\n\t    tb\n\t    pb\n\t)\n\t```\n## 条件语句\n1. if 条件不需要括号 \n\t![Screen Shot 2018-12-15 at 20.27.54][image-1]\n2. if 条件里可以赋值， 赋值的变量作用域就在这个if语句里\n3. switch 可以自动break, switch 后边可以没有变量， 在case中写表达式\n\n\t```go \n\tfunc grade(score int) string {\n\t\tg := \"\"\n\t\tswitch {\n\t    \tcase score < 0 || score > 100:\n\t    \t\tpanic(fmt.Sprintf(\"Wrong score: %d\", score)) // 中断程序执行\n\t    \tcase score < 60:\n\t    \t\tg = \"F\"\n\t    \tcase score < 80:\n\t    \t\tg = \"C\"\n\t    \tcase score < 90:\n\t    \t\tg = \"B\"\n\t    \tcase score <= 100:\n\t    \t\tg = \"A\"\n\t    \treturn g\n\t}\n\t```\n\n## 循环\n1. for 的条件里不需要括号， 可以省略初始条件，结束条件， 递增表达式\n\n\t```go\n\tsum := 0\n\tfor i := 1; i <= 100; i++{\n\t    sum += i\n\t}\n\t    \n\tfunc convertToBin(n int) string {\n\t    result := \"\"\n\t    for ; n > 0; n /= 2 {\n\t        lsb := n % 2\n\t        result = strconv.Itoa(lsb) + result\n\t    }\n\t    return result \n\t}\n\tfunc printFile(filename string) {\n\t    file, err := os.Open(filename)\n\t    if err != nil {\n\t        panic(err)\n\t    }\n\t        printFileContents(file)\n\t    }\n\t        \n\tfunc printFileContents(reader io.Reader) {\n\t    scanner := bufio.NewScanner(reader)\n\t    for scanner.Scan() {\n\t\t       fmt.Println(scanner.Text())\n\t    }\n\t}\n\t```\n\n## 函数\n```go\n// 函数名（变量1 类型， 变量2 类型）（返回值类型1， 返回值类型2）{}\nfunc eval(a, b int, op string) (int, error) {\n\tswitch op {\n\tcase \"+\":\n\t\treturn a + b, nil\n\tcase \"-\":\n\t\treturn a - b, nil\n\tcase \"*\":\n\t\treturn a * b, nil\n\tcase \"/\":\n\t\tq, _ := div(a, b)\n\t\treturn q, nil\n\tdefault:\n\t\treturn 0, fmt.Errorf(\n\t\t\t\"unsupported operation: %s\", op)\n\t}\n}\nfunc div(a, b int) (q, r int) {\n    return a / b, a % b\n    // 或者 不建议\n    q = a / b\n    r = a % b\n    return \n}\n    \nfunc sum(numbers ...int) int {\n\ts := 0\n\tfor i := range numbers {\n\t\ts += numbers[i]\n\t}\n\treturn s\n}\n```\n\n函数式编程\n\n```go\nfunc apply(op func(int, int) int, a, b int) int {\n\tp := reflect.ValueOf(op).Pointer()\n\topName := runtime.FuncForPC(p).Name()\n\tfmt.Printf(\"Calling function %s with args \"+\n\t\t\"(%d, %d)\\n\", opName, a, b)\n    \n\treturn op(a, b)    \n}\n```\n## 指针\n1. 指针不能运算\n2. 值传递？引用传递？ go语言只有值传递\n\t```go\n\tfunc swap(a, b *int) {\n\t\t*b, *a = *a, *b\n\t}\n\t// 另外这一种做法\n\tfunc swap(a, b int) (int, int) {\n\t\treturn b, a\n\t}\n\t```\n\n[image-1]:\thttps://lh3.googleusercontent.com/-j_DKZXUMz0w/XBWwfjeyv_I/AAAAAAAATmU/h3Vy4DTuRK8X0GyqRnjN2ZD8GHzm6a3yACHMYCw/I/Screen%2BShot%2B2018-12-15%2Bat%2B20.27.54.png","tags":["Golang"]},{"title":"Java notebook","url":"/blog/2019/02/14/Java-notebook/","content":"\n### Basic Part\n\n#### Byte, Short, Int and Long\n\n1. Width\n\n   Byte: 8 bits\n\n   Short: 16 bits\n\n   Int: 32 bits\n\n   Long: 64 bits\n\n   ```java\n   long myLongValue = 1000L; //recommend to write \"L\"\n   ```\n\n2. Easy to read\n\n   ```java\n   int myIntValue = 3_123_456;\n   ```\n\n3. Variable type transfer\n\n   Byte, Short -> Int -> Long\n\n   ```java\n   byte myByteVal = 4;\n   // Wrong\n   short MyShortVal = 20 / myByteVal;\n   // the result will transfer to int automatically \n   // Correct\n   short MyShortVal = (short) (20 / myByteVal);\n   ```\n\n------\n\n#### Float and Double\n\n1. Width\n\n   Float: 32 bits\n\n   Double: 64 bits\n\n2. Easy to read\n\n   ```java\n   double pi = 3.141_592_6;\n   ```\n\n3. Recommend to use double instead of float\n\n------\n\n#### Char and Boolean\n\n1. Char\n\n   A Char variable can be a letter or a digit or a speical character or [unicode character](https://unicode-table.com/en/). \n\n   ```java\n   // a unicode character\n   char myChar3 = '\\u00A9';\n   ```\n\n2. Boolean\n\n   ```java\n   boolean isMale = false;\n   ```\n\n3. Eight primitive type of Java\n\n   byte, short, int, long, float, double, char, boolean\n\n------\n\n#### String\n\n1. String can contain a sequence of characters. \n\n2. Use plus to append another string\n\n   ```java\n   String myStr = \"This is a string\";\n   myStr = myStr + \", and this is more.\";\n   ```\n\n3. String + Int\n\n   ```java\n   String lastString = \"10\";\n   int myInt = 50;\n   lastString = lastString + myInt;\n   System.out.println(lastString);\n   // ouput is \"1050\"\n   ```\n\n4. String is an object (not primitive type).\n\n------\n\n#### Operator\n\n1. Example of \" = + - * / % \"\n\n   ```java\n   int result = 2;\n   result += 1; //same as \"result++\" or \"result += 1\"\n   // 3\n   result = result - 1; // same as \"result--\" or \"result -= 1\" \n   // 2\n   result = result * 10; // same as \"result *= 10\"\n   // 20\n   result = result / 5; // same as \"result /= 5\"\n   // 4\n   result = result % 3; //same as \"result %= 3\"\n   // 1\n   \n   ```\n\n2. Example of \"==\" \" !=\" \">\" \"<\" \"&&\" \"||\"\n\n   ```java\n   boolean isMale = false;\n   if (isMale == true)\n       System.out.println(\"Male!\");\n   int Score = 82;\n   if (Score != 100)\n       System.out.println(\"Not 100!\");\n   if (Score > 80)\n       System.out.println(\"Good score!\");\n   if (Score < 80)\n       System.out.println(\"Bad score!\");\n   int secondScore = 90;\n   if ((secondScore > Score) && (secondScore < 100))\n       System.out.println(\"Greater than firstscore and less than 100!\");\n   if ((secondScore > Score) || (secondScore < 100))\n       System.out.println(\"Greater than firstscore or less than 100!\");\n   \n   ```\n\n3. Assignment expression will return value. Be carefule when writing conditon expression \"==\".\n\n   Example:\n\n   ```java\n   boolean isCar = false;\n   if (isCar = true)\n        System.out.println(\"It's a car\");\n   // This code will ouput \"It's a car\"!!!\n   // Because \"isCar = true\" will return true.\n   \n   ```\n\n4. =?:\n\n   Example:\n\n   ```java\n   boolean isCar = false;\n   boolean wasCar = isCar? true : false;\n   // is false\n   \n   ```\n\n5. More operators\n\n   ```\n   !       Logical complement operator;\n           inverts the value of a boolean\n   ~       Unary bitwise complement\n   <<      Signed left shift\n   >>      Signed right shift\n   >>>     Unsigned right shift\n   &       Bitwise AND\n   ^       Bitwise exclusive OR\n   |       Bitwise inclusive OR\n   \n   ```\n\n------\n\n#### Semicolon  ;\n\n------\n\n#### If then else\n\nTemplate:\n\n```java\nif( condition1 ){\n    ...\n}else if( codition2 ){\n    ...\n}else{\n    ...\n}\n\n```\n\nAttention:\n\n```java\nboolean gameover = true;\nif (gameover){\n    int score = 0;\n}\n// Can't access the variables in the if code block. \n// Those variables will be deleted automatically.\n// wrong\nint finalscore = score;\n\n```\n\n------\n\n#### Method\n\nExample:\n\n```java\npublic static int methodAdd(int val1, int val2) {\n    return (val1+val2);\n}\n\n```\n\n------\n\n#### Method Overloading\n\n------\n\n#### Switch Statement\n\n```java\nswitch(switchValue){\n    case 1:\n        ...\n        break;\n    case 2:\n        ...\n        break;\n    case 3: case 4: case 5:\n        ...\n        break;\n    default:\n        ...\n        break;       \n}\n\n```\n\n------\n\n#### For Loop Statement\n\n```java\nfor(init;termination;increment){\n    ...\n}\n\n```\n\n Example\n\n```java\nfor(i=0;i<5;i++){\n    ...\n}\n\n```\n\nTip:\n\n```java\nString.format(\"%.2f\",doubleVal);\n\n```\n\n------\n\n#### Parsing Values form a String\n\nConvert String to Int\n\n```java\nint number = Integer.parseInt(numberString);\n\n```\n\nConvert String to Double\n\n```java\ndouble number = Double.parseDouble(numberString);\n\n```\n\n------\n\n### Reading User Input\n\n```java\nScanner scanner = new Scanner(System.in);\nString name = scanner.nextline();\nint age = scanner.nextInt();\nscanner.nextInt();//for the \"enter\" after the input integer; \nscanner.close();\n\n```\n\nCheck input as int\n\n```java\nScanner scanner = new Scanner(System.in);\nboolean hasNextInt = scanner.hasNextInt();\nif(hasNextInt){\n    int age = scanner.nextInt();\n    ...\n}\n\n```\n\nTip: \n\n```java\nint max = Integer.MAX_VAULE;\nint min = Integer.MIN_VAULE;\n\n```\n\n------\n\n### OOP Part\n\n#### Class\n\n1. Features: state with fields and behaviors with methods\n2. public, private, protected\n\n```java\npublic class Account{\n    private String number;\n    private double deposit;\n    \n    public Account(){\n        this(\"12345\",2.50);//has to be the first line\n    }\n    \n    public Account(String number){\n        this(number, 2.50);\n    }\n    public Account(String number, double deposit){\n        self.number = number;\n        self.deposit = deposit;\n    }\n    \n    public double getDeposit(){\n        return deposit;\n    }\n}\n\n```\n\n------\n\n#### Inheritance\n\n```java\n//Animal.java\npublic class Animal{\n    private String name;\n    private int size;\n    public Animal(String name, int size){\n        this.name = name;\n        this.size = size;\n    }\n    \n    public void eat(){\n        ...\n    }\n}\n\n```\n\n```java\n//Dog.java\npublic class Dog extends Animal{\n    private int eyes;\n    public Dog(String name, int size, int eyes){\n        this.eyes = eyes;\n        super(name, size);\n    }\n    @Override\n    public coid eat(){\n        ...\n        // if use the eat method in father class\n        super.eat();\n    }\n}\n\n```\n\n------\n\n#### Static vs Instance method\n\nStatic Methods:\n\n- declared by using a static modifier\n- can't access instance methods and instance variables directly.\n- usually used for operations that don't require any data from an instance of class(from 'this')\n- Can't use this keyword\n- \"Main\" is a static method\n\nInstance methods\n\n- belong to an instance of class\n- to use an instance methos we have to instantiate the class first usually by using the new keyword.\n- can access instance/static methods and instance/static variables.\n\n#### Static vs Instance variables \n\nStatic variables:\n\n- decalred by using keyword static \n- static variables are also known as static member variables\n- every instance of that class shares the same variables\n- if changes are made to that variable, all other instances will see the effect of the change.\n- For example, when reading uesr input using Scanner we will declare scanner as a static variable.\n- That way static methods can access it directly.\n\nInstance variables:\n\n- known as fields or member variables\n\n------\n\n#### Compostion\n\n------\n\n#### Encapsulation\n\npublic, private\n\n------\n\n#### Polymorphism\n\nTip: random int number\n\n```java\n// return 0~1 double number\nMath.random\n// generate random number between 1 to 5.\nint randomNum = (int)(Math.random*5)+1\n\n```\n\n------\n\n#### Array\n\n```java\nint[] myIntArray = new int[10];\nmyIntArray[5] = 50;\n// or\nint[] myIntArray = {1,2,3,4,5,6,7,8,9,0};\n// get length of array\nmyIntArray.length;\n\n//copy\nint[] sortedArray = Array.copyof(myIntArray, myIntArray.length);\n\n\n```\n\n","tags":["Java"]}]