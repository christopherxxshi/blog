[{"title":"原型和原型链","url":"/blog/2019/02/14/原型和原型链/","content":"\n## 知识点\n1. 构造函数\n    *  函数名首字母大写\n    *  函数最后会默认 return this\n2. 构造函数扩展\n    *  var a = {} 其实是 var a = new Object()的语法糖\n    *  var a = [] 其实是 var a = new Array()的语法糖\n    *  function Foo(){...} 其实是 var Foo = new Function(...)的语法糖\n    *  使用instanceof判断一个函数是否是一个变量的构造函数\n    *  判断一个变量是否为数组： 变量 instanceof Array\n3. 原型规则\n    *  所有引用类型（数组，对象，函数），都具有对象特性，即可自由扩展属性（除了“null”）\n    *  所有引用类型，都具有__proto__属性（隐式原型），属性值是一个普通的对象\n    *  所有引用类型，都具有prototype属性（显式原型），属性值是一个普通的对象\n    *  所有引用类型，__proto__属性值指向他的构造函数的prototype的属性值\n    *  当试图得到一个对象的某个属性时，如果这个对象本身没有这个属性，那么会去他的__proto__属性（即它的构造函数的prototype）中寻找\n    \n        ```javascript\n        var obj = {};\n        obj.a = 100;\n        var arr = [];\n        arr.a = 100;\n        function fn(){}\n        fn.a = 100\n        \n        console.log(obj.__proto__) // {}\n        console.log(arr.__proto__) // []\n        console.log(fn.__proto__) // [Function]\n        console.log(fn.prototype) // fn {}\n        console.log(obj.__proto__ === Object.prototype) // true\n        ```\n    *  对象.hasOwnProperty(属性) 判断是否是对象自身属性\n4. 原型链\n    * 代码  \n    \n        ```javascript\n        function Foo(name){\n        this.name = name\n        }\n        Foo.prototype.alertName = function(){\n            console.log(this.name)\n        }\n        \n        var f = new Foo('chris')\n        f.printName = function(){\n            console.log(this.name)\n        }\n        f.printName()\n        f.alertName()\n        f.toString() // 在f.__proto__.__proto__中寻找\n        ```\n    * 原型链 \n    \n    ![Screen Shot 2018-10-30 at 16.07.12](https://lh3.googleusercontent.com/-O83_4vaZQPU/W9kZxOgpBLI/AAAAAAAATDM/h_TBc7IPf8gMbXcXFvu0W898Mybwo_hGACHMYCw/I/Screen%252BShot%252B2018-10-30%252Bat%252B16.07.12.png)\n   * instanceof 用于判断引用类型属于哪个构造方法\n   * f instanceof Foo 的判断逻辑：\n       * f的__proto__一层一层往上，能否对应到Foo.prototype \n       * 再试着判断f instanceof Object\n       \n## 解题\n1. 如何准确判断一个变量是数组\n\n    ```javascript \n    var arr = []\n    arr instanceof Array //true\n    typeof arr // object, typeof 无法判断是否是数组\n    ```\n2. 写一个原型链继承的例子\n    \n    ```javascript\n    function Elem(id){\n        this.elem = document.getElementById(id)\n    }\n    Elem.prototype.html = function (val){\n        var elem = this.elem\n        if (val){\n            elem.innerHTML = val\n            return this //链式操作\n        }else{\n            return elem.innerHTML\n        }\n    }\n    \n    \n    Elem.prototype.on = function(type, fn){\n        var elem = this.elem\n        elem.addEventListener(type, fn)\n    \n    }\n    var div1 = new Elem('div1')\n    console.log(div1.html())\n    //链式操作\n    div1.html('<p>hello</p>').on('click',function(){\n        alert('clicked')\n    })\n    ```\n3. 描述new一个对象的过程\n    *  创建一个新对象\n    *  this指向这个对象\n    *  执行代码，对this赋值\n    *  返回this\n  \n\n\n    \n    \n\n\n\n    ","tags":["Javascript"]},{"title":"作用域和闭包","url":"/blog/2019/02/14/作用域和闭包/","content":"\n### Basic Part\n\n#### Byte, Short, Int and Long\n\n1. Width\n\n   Byte: 8 bits\n\n   Short: 16 bits\n\n   Int: 32 bits\n\n   Long: 64 bits\n\n   ```java\n   long myLongValue = 1000L; //recommend to write \"L\"\n   ```\n\n2. Easy to read\n\n   ```java\n   int myIntValue = 3_123_456;\n   ```\n\n3. Variable type transfer\n\n   Byte, Short -> Int -> Long\n\n   ```java\n   byte myByteVal = 4;\n   // Wrong\n   short MyShortVal = 20 / myByteVal;\n   // the result will transfer to int automatically \n   // Correct\n   short MyShortVal = (short) (20 / myByteVal);\n   ```\n\n------\n\n#### Float and Double\n\n1. Width\n\n   Float: 32 bits\n\n   Double: 64 bits\n\n2. Easy to read\n\n   ```java\n   double pi = 3.141_592_6;\n   ```\n\n3. Recommend to use double instead of float\n\n------\n\n#### Char and Boolean\n\n1. Char\n\n   A Char variable can be a letter or a digit or a speical character or [unicode character](https://unicode-table.com/en/). \n\n   ```java\n   // a unicode character\n   char myChar3 = '\\u00A9';\n   ```\n\n2. Boolean\n\n   ```java\n   boolean isMale = false;\n   ```\n\n3. Eight primitive type of Java\n\n   byte, short, int, long, float, double, char, boolean\n\n------\n\n#### String\n\n1. String can contain a sequence of characters. \n\n2. Use plus to append another string\n\n   ```java\n   String myStr = \"This is a string\";\n   myStr = myStr + \", and this is more.\";\n   ```\n\n3. String + Int\n\n   ```java\n   String lastString = \"10\";\n   int myInt = 50;\n   lastString = lastString + myInt;\n   System.out.println(lastString);\n   // ouput is \"1050\"\n   ```\n\n4. String is an object (not primitive type).\n\n------\n\n#### Operator\n\n1. Example of \" = + - * / % \"\n\n   ```java\n   int result = 2;\n   result += 1; //same as \"result++\" or \"result += 1\"\n   // 3\n   result = result - 1; // same as \"result--\" or \"result -= 1\" \n   // 2\n   result = result * 10; // same as \"result *= 10\"\n   // 20\n   result = result / 5; // same as \"result /= 5\"\n   // 4\n   result = result % 3; //same as \"result %= 3\"\n   // 1\n   \n   ```\n\n2. Example of \"==\" \" !=\" \">\" \"<\" \"&&\" \"||\"\n\n   ```java\n   boolean isMale = false;\n   if (isMale == true)\n       System.out.println(\"Male!\");\n   int Score = 82;\n   if (Score != 100)\n       System.out.println(\"Not 100!\");\n   if (Score > 80)\n       System.out.println(\"Good score!\");\n   if (Score < 80)\n       System.out.println(\"Bad score!\");\n   int secondScore = 90;\n   if ((secondScore > Score) && (secondScore < 100))\n       System.out.println(\"Greater than firstscore and less than 100!\");\n   if ((secondScore > Score) || (secondScore < 100))\n       System.out.println(\"Greater than firstscore or less than 100!\");\n   \n   ```\n\n3. Assignment expression will return value. Be carefule when writing conditon expression \"==\".\n\n   Example:\n\n   ```java\n   boolean isCar = false;\n   if (isCar = true)\n        System.out.println(\"It's a car\");\n   // This code will ouput \"It's a car\"!!!\n   // Because \"isCar = true\" will return true.\n   \n   ```\n\n4. =?:\n\n   Example:\n\n   ```java\n   boolean isCar = false;\n   boolean wasCar = isCar? true : false;\n   // is false\n   \n   ```\n\n5. More operators\n\n   ```\n   !       Logical complement operator;\n           inverts the value of a boolean\n   ~       Unary bitwise complement\n   <<      Signed left shift\n   >>      Signed right shift\n   >>>     Unsigned right shift\n   &       Bitwise AND\n   ^       Bitwise exclusive OR\n   |       Bitwise inclusive OR\n   \n   ```\n\n------\n\n#### Semicolon  ;\n\n------\n\n#### If then else\n\nTemplate:\n\n```java\nif( condition1 ){\n    ...\n}else if( codition2 ){\n    ...\n}else{\n    ...\n}\n\n```\n\nAttention:\n\n```java\nboolean gameover = true;\nif (gameover){\n    int score = 0;\n}\n// Can't access the variables in the if code block. \n// Those variables will be deleted automatically.\n// wrong\nint finalscore = score;\n\n```\n\n------\n\n#### Method\n\nExample:\n\n```java\npublic static int methodAdd(int val1, int val2) {\n    return (val1+val2);\n}\n\n```\n\n------\n\n#### Method Overloading\n\n------\n\n#### Switch Statement\n\n```java\nswitch(switchValue){\n    case 1:\n        ...\n        break;\n    case 2:\n        ...\n        break;\n    case 3: case 4: case 5:\n        ...\n        break;\n    default:\n        ...\n        break;       \n}\n\n```\n\n------\n\n#### For Loop Statement\n\n```java\nfor(init;termination;increment){\n    ...\n}\n\n```\n\n Example\n\n```java\nfor(i=0;i<5;i++){\n    ...\n}\n\n```\n\nTip:\n\n```java\nString.format(\"%.2f\",doubleVal);\n\n```\n\n------\n\n#### Parsing Values form a String\n\nConvert String to Int\n\n```java\nint number = Integer.parseInt(numberString);\n\n```\n\nConvert String to Double\n\n```java\ndouble number = Double.parseDouble(numberString);\n\n```\n\n------\n\n### Reading User Input\n\n```java\nScanner scanner = new Scanner(System.in);\nString name = scanner.nextline();\nint age = scanner.nextInt();\nscanner.nextInt();//for the \"enter\" after the input integer; \nscanner.close();\n\n```\n\nCheck input as int\n\n```java\nScanner scanner = new Scanner(System.in);\nboolean hasNextInt = scanner.hasNextInt();\nif(hasNextInt){\n    int age = scanner.nextInt();\n    ...\n}\n\n```\n\nTip: \n\n```java\nint max = Integer.MAX_VAULE;\nint min = Integer.MIN_VAULE;\n\n```\n\n------\n\n### OOP Part\n\n#### Class\n\n1. Features: state with fields and behaviors with methods\n2. public, private, protected\n\n```java\npublic class Account{\n    private String number;\n    private double deposit;\n    \n    public Account(){\n        this(\"12345\",2.50);//has to be the first line\n    }\n    \n    public Account(String number){\n        this(number, 2.50);\n    }\n    public Account(String number, double deposit){\n        self.number = number;\n        self.deposit = deposit;\n    }\n    \n    public double getDeposit(){\n        return deposit;\n    }\n}\n\n```\n\n------\n\n#### Inheritance\n\n```java\n//Animal.java\npublic class Animal{\n    private String name;\n    private int size;\n    public Animal(String name, int size){\n        this.name = name;\n        this.size = size;\n    }\n    \n    public void eat(){\n        ...\n    }\n}\n\n```\n\n```java\n//Dog.java\npublic class Dog extends Animal{\n    private int eyes;\n    public Dog(String name, int size, int eyes){\n        this.eyes = eyes;\n        super(name, size);\n    }\n    @Override\n    public coid eat(){\n        ...\n        // if use the eat method in father class\n        super.eat();\n    }\n}\n\n```\n\n------\n\n#### Static vs Instance method\n\nStatic Methods:\n\n- declared by using a static modifier\n- can't access instance methods and instance variables directly.\n- usually used for operations that don't require any data from an instance of class(from 'this')\n- Can't use this keyword\n- \"Main\" is a static method\n\nInstance methods\n\n- belong to an instance of class\n- to use an instance methos we have to instantiate the class first usually by using the new keyword.\n- can access instance/static methods and instance/static variables.\n\n#### Static vs Instance variables \n\nStatic variables:\n\n- decalred by using keyword static \n- static variables are also known as static member variables\n- every instance of that class shares the same variables\n- if changes are made to that variable, all other instances will see the effect of the change.\n- For example, when reading uesr input using Scanner we will declare scanner as a static variable.\n- That way static methods can access it directly.\n\nInstance variables:\n\n- known as fields or member variables\n\n------\n\n#### Compostion\n\n------\n\n#### Encapsulation\n\npublic, private\n\n------\n\n#### Polymorphism\n\nTip: random int number\n\n```java\n// return 0~1 double number\nMath.random\n// generate random number between 1 to 5.\nint randomNum = (int)(Math.random*5)+1\n\n```\n\n------\n\n#### Array\n\n```java\nint[] myIntArray = new int[10];\nmyIntArray[5] = 50;\n// or\nint[] myIntArray = {1,2,3,4,5,6,7,8,9,0};\n// get length of array\nmyIntArray.length;\n\n//copy\nint[] sortedArray = Array.copyof(myIntArray, myIntArray.length);\n\n\n```\n\n\n","tags":["Javascript"]},{"title":"Golang notebook","url":"/blog/2019/02/14/Golang-notebook/","content":"## 变量定义\n1. var 变量名 变量类型 //可以默认为空\n    \n    ```go\n    var a int // 0\n    var s string // \"\"\n    var b,c int = 3,4\n    //集中定义\n    var (\n        b int = 3\n        c int = \"def\"\n    )\n    ```\n    \n2. 定义的变量必须使用\n3. 可以自动推断类型\n\n    ```go\n    var a, b, c = 3, true, \"def\"\n    ```\n    \n4. 第一次定义可以使用:= (不可以在函数外使用)\n    \n    ```go\n    a, b, c := 3, true, \"def\"\n    ```\n    \n## 内建变量类型\n1. bool, string\n2. (u)int (长度根据系统字节), (u)int8, (u)int16,(u)int32, (u)int64, uintptr\n3. byte, rune(go中的char, 32位)\n4. float32, float64, complex64(复数，实部32位，虚部32位), complex128\n\n    ```go\n       c := 3+4i\n       cmplx.Abs(c) // 5\n       cmplx.Pow(math.E, 1i*math.Pi)+1 // 0, 虚部会带有一个极小值偏差\n       cmplx.Exp(1i*math.Pi)+1 // 0 \n    ```\n\n5. 类型转换是强制的, 没有隐式转换\n\n    ```go\n       a, b := 3, 4\n       var c int\n       c = int(math.Sqrt(float64(a*a+b*b)))\n    ```\n\n## 常量与枚举\n1. 常量定义 const 常量名 （类型） = 值\n\n    ```go\n        const filename = \"test.txt\"\n        const(\n            a = 3\n            b = 4\n        ) \n    ```\n    \n2. 常量不要随意大写\n3. 常量数值可作为任意数值类型使用\n4. 枚举\n\n    ```go\n    const(\n        cpp = iota // 0\n        _\n        python // 2\n        golang // 3\n        javascript //4 \n    )\n    // b, kb, mb, gb, tb, pb\n    const(\n        b = 1<<(10*iota) //itoa可作为自增值得的种子\n        kb\n        mb\n        gb\n        tb\n        pb\n    )\n    ```\n    \n## 条件语句\n1. if 条件不需要括号 \n    ![Screen Shot 2018-12-15 at 20.27.54](https://lh3.googleusercontent.com/-j_DKZXUMz0w/XBWwfjeyv_I/AAAAAAAATmU/h3Vy4DTuRK8X0GyqRnjN2ZD8GHzm6a3yACHMYCw/I/Screen%252BShot%252B2018-12-15%252Bat%252B20.27.54.png)\n2. if 条件里可以赋值， 赋值的变量作用域就在这个if语句里\n3. switch 可以自动break, switch 后边可以没有变量， 在case中写表达式\n\n    ```go \n    func grade(score int) string {\n    \tg := \"\"\n    \tswitch {\n        \tcase score < 0 || score > 100:\n        \t\tpanic(fmt.Sprintf(\"Wrong score: %d\", score)) // 中断程序执行\n        \tcase score < 60:\n        \t\tg = \"F\"\n        \tcase score < 80:\n        \t\tg = \"C\"\n        \tcase score < 90:\n        \t\tg = \"B\"\n        \tcase score <= 100:\n        \t\tg = \"A\"\n        \treturn g\n    }\n    ```\n\n## 循环\n1. for 的条件里不需要括号， 可以省略初始条件，结束条件， 递增表达式\n\n    ```go\n    sum := 0\n    for i := 1; i <= 100; i++{\n        sum += i\n    }\n    \n    func convertToBin(n int) string {\n        result := \"\"\n        for ; n > 0; n /= 2 {\n            lsb := n % 2\n            result = strconv.Itoa(lsb) + result\n        }\n        return result \n    }\n    ```\n    \n    ```go\n    func printFile(filename string) {\n        file, err := os.Open(filename)\n        if err != nil {\n            panic(err)\n        }\n            printFileContents(file)\n        }\n        \n    func printFileContents(reader io.Reader) {\n        scanner := bufio.NewScanner(reader)\n        for scanner.Scan() {\n    \t       fmt.Println(scanner.Text())\n        }\n    }\n    ```\n    \n    ## 函数\n    \n    ```go\n    // 函数名（变量1 类型， 变量2 类型）（返回值类型1， 返回值类型2）{}\n    func eval(a, b int, op string) (int, error) {\n    \tswitch op {\n    \tcase \"+\":\n    \t\treturn a + b, nil\n    \tcase \"-\":\n    \t\treturn a - b, nil\n    \tcase \"*\":\n    \t\treturn a * b, nil\n    \tcase \"/\":\n    \t\tq, _ := div(a, b)\n    \t\treturn q, nil\n    \tdefault:\n    \t\treturn 0, fmt.Errorf(\n    \t\t\t\"unsupported operation: %s\", op)\n    \t}\n    }\n    func div(a, b int) (q, r int) {\n        return a / b, a % b\n        // 或者 不建议\n        q = a / b\n        r = a % b\n        return \n    }\n    \n    func sum(numbers ...int) int {\n    \ts := 0\n    \tfor i := range numbers {\n    \t\ts += numbers[i]\n    \t}\n    \treturn s\n    }\n    ```\n    \n    函数式编程\n    \n    ```go\n    func apply(op func(int, int) int, a, b int) int {\n    \tp := reflect.ValueOf(op).Pointer()\n    \topName := runtime.FuncForPC(p).Name()\n    \tfmt.Printf(\"Calling function %s with args \"+\n    \t\t\"(%d, %d)\\n\", opName, a, b)\n    \n    \treturn op(a, b)    \n    }\n    ```\n    \n    ## 指针\n    1. 指针不能运算\n    2. 值传递？引用传递？ go语言只有值传递\n    \n    ```go\n    func swap(a, b *int) {\n    \t*b, *a = *a, *b\n    }\n    // 另外这一种做法\n    func swap(a, b int) (int, int) {\n    \treturn b, a\n    }\n    ```","tags":["Golang"]},{"title":"Java notebook","url":"/blog/2019/02/14/Java-notebook/","content":"\n### Basic Part\n\n#### Byte, Short, Int and Long\n\n1. Width\n\n   Byte: 8 bits\n\n   Short: 16 bits\n\n   Int: 32 bits\n\n   Long: 64 bits\n\n   ```java\n   long myLongValue = 1000L; //recommend to write \"L\"\n   ```\n\n2. Easy to read\n\n   ```java\n   int myIntValue = 3_123_456;\n   ```\n\n3. Variable type transfer\n\n   Byte, Short -> Int -> Long\n\n   ```java\n   byte myByteVal = 4;\n   // Wrong\n   short MyShortVal = 20 / myByteVal;\n   // the result will transfer to int automatically \n   // Correct\n   short MyShortVal = (short) (20 / myByteVal);\n   ```\n\n------\n\n#### Float and Double\n\n1. Width\n\n   Float: 32 bits\n\n   Double: 64 bits\n\n2. Easy to read\n\n   ```java\n   double pi = 3.141_592_6;\n   ```\n\n3. Recommend to use double instead of float\n\n------\n\n#### Char and Boolean\n\n1. Char\n\n   A Char variable can be a letter or a digit or a speical character or [unicode character](https://unicode-table.com/en/). \n\n   ```java\n   // a unicode character\n   char myChar3 = '\\u00A9';\n   ```\n\n2. Boolean\n\n   ```java\n   boolean isMale = false;\n   ```\n\n3. Eight primitive type of Java\n\n   byte, short, int, long, float, double, char, boolean\n\n------\n\n#### String\n\n1. String can contain a sequence of characters. \n\n2. Use plus to append another string\n\n   ```java\n   String myStr = \"This is a string\";\n   myStr = myStr + \", and this is more.\";\n   ```\n\n3. String + Int\n\n   ```java\n   String lastString = \"10\";\n   int myInt = 50;\n   lastString = lastString + myInt;\n   System.out.println(lastString);\n   // ouput is \"1050\"\n   ```\n\n4. String is an object (not primitive type).\n\n------\n\n#### Operator\n\n1. Example of \" = + - * / % \"\n\n   ```java\n   int result = 2;\n   result += 1; //same as \"result++\" or \"result += 1\"\n   // 3\n   result = result - 1; // same as \"result--\" or \"result -= 1\" \n   // 2\n   result = result * 10; // same as \"result *= 10\"\n   // 20\n   result = result / 5; // same as \"result /= 5\"\n   // 4\n   result = result % 3; //same as \"result %= 3\"\n   // 1\n   \n   ```\n\n2. Example of \"==\" \" !=\" \">\" \"<\" \"&&\" \"||\"\n\n   ```java\n   boolean isMale = false;\n   if (isMale == true)\n       System.out.println(\"Male!\");\n   int Score = 82;\n   if (Score != 100)\n       System.out.println(\"Not 100!\");\n   if (Score > 80)\n       System.out.println(\"Good score!\");\n   if (Score < 80)\n       System.out.println(\"Bad score!\");\n   int secondScore = 90;\n   if ((secondScore > Score) && (secondScore < 100))\n       System.out.println(\"Greater than firstscore and less than 100!\");\n   if ((secondScore > Score) || (secondScore < 100))\n       System.out.println(\"Greater than firstscore or less than 100!\");\n   \n   ```\n\n3. Assignment expression will return value. Be carefule when writing conditon expression \"==\".\n\n   Example:\n\n   ```java\n   boolean isCar = false;\n   if (isCar = true)\n        System.out.println(\"It's a car\");\n   // This code will ouput \"It's a car\"!!!\n   // Because \"isCar = true\" will return true.\n   \n   ```\n\n4. =?:\n\n   Example:\n\n   ```java\n   boolean isCar = false;\n   boolean wasCar = isCar? true : false;\n   // is false\n   \n   ```\n\n5. More operators\n\n   ```\n   !       Logical complement operator;\n           inverts the value of a boolean\n   ~       Unary bitwise complement\n   <<      Signed left shift\n   >>      Signed right shift\n   >>>     Unsigned right shift\n   &       Bitwise AND\n   ^       Bitwise exclusive OR\n   |       Bitwise inclusive OR\n   \n   ```\n\n------\n\n#### Semicolon  ;\n\n------\n\n#### If then else\n\nTemplate:\n\n```java\nif( condition1 ){\n    ...\n}else if( codition2 ){\n    ...\n}else{\n    ...\n}\n\n```\n\nAttention:\n\n```java\nboolean gameover = true;\nif (gameover){\n    int score = 0;\n}\n// Can't access the variables in the if code block. \n// Those variables will be deleted automatically.\n// wrong\nint finalscore = score;\n\n```\n\n------\n\n#### Method\n\nExample:\n\n```java\npublic static int methodAdd(int val1, int val2) {\n    return (val1+val2);\n}\n\n```\n\n------\n\n#### Method Overloading\n\n------\n\n#### Switch Statement\n\n```java\nswitch(switchValue){\n    case 1:\n        ...\n        break;\n    case 2:\n        ...\n        break;\n    case 3: case 4: case 5:\n        ...\n        break;\n    default:\n        ...\n        break;       \n}\n\n```\n\n------\n\n#### For Loop Statement\n\n```java\nfor(init;termination;increment){\n    ...\n}\n\n```\n\n Example\n\n```java\nfor(i=0;i<5;i++){\n    ...\n}\n\n```\n\nTip:\n\n```java\nString.format(\"%.2f\",doubleVal);\n\n```\n\n------\n\n#### Parsing Values form a String\n\nConvert String to Int\n\n```java\nint number = Integer.parseInt(numberString);\n\n```\n\nConvert String to Double\n\n```java\ndouble number = Double.parseDouble(numberString);\n\n```\n\n------\n\n### Reading User Input\n\n```java\nScanner scanner = new Scanner(System.in);\nString name = scanner.nextline();\nint age = scanner.nextInt();\nscanner.nextInt();//for the \"enter\" after the input integer; \nscanner.close();\n\n```\n\nCheck input as int\n\n```java\nScanner scanner = new Scanner(System.in);\nboolean hasNextInt = scanner.hasNextInt();\nif(hasNextInt){\n    int age = scanner.nextInt();\n    ...\n}\n\n```\n\nTip: \n\n```java\nint max = Integer.MAX_VAULE;\nint min = Integer.MIN_VAULE;\n\n```\n\n------\n\n### OOP Part\n\n#### Class\n\n1. Features: state with fields and behaviors with methods\n2. public, private, protected\n\n```java\npublic class Account{\n    private String number;\n    private double deposit;\n    \n    public Account(){\n        this(\"12345\",2.50);//has to be the first line\n    }\n    \n    public Account(String number){\n        this(number, 2.50);\n    }\n    public Account(String number, double deposit){\n        self.number = number;\n        self.deposit = deposit;\n    }\n    \n    public double getDeposit(){\n        return deposit;\n    }\n}\n\n```\n\n------\n\n#### Inheritance\n\n```java\n//Animal.java\npublic class Animal{\n    private String name;\n    private int size;\n    public Animal(String name, int size){\n        this.name = name;\n        this.size = size;\n    }\n    \n    public void eat(){\n        ...\n    }\n}\n\n```\n\n```java\n//Dog.java\npublic class Dog extends Animal{\n    private int eyes;\n    public Dog(String name, int size, int eyes){\n        this.eyes = eyes;\n        super(name, size);\n    }\n    @Override\n    public coid eat(){\n        ...\n        // if use the eat method in father class\n        super.eat();\n    }\n}\n\n```\n\n------\n\n#### Static vs Instance method\n\nStatic Methods:\n\n- declared by using a static modifier\n- can't access instance methods and instance variables directly.\n- usually used for operations that don't require any data from an instance of class(from 'this')\n- Can't use this keyword\n- \"Main\" is a static method\n\nInstance methods\n\n- belong to an instance of class\n- to use an instance methos we have to instantiate the class first usually by using the new keyword.\n- can access instance/static methods and instance/static variables.\n\n#### Static vs Instance variables \n\nStatic variables:\n\n- decalred by using keyword static \n- static variables are also known as static member variables\n- every instance of that class shares the same variables\n- if changes are made to that variable, all other instances will see the effect of the change.\n- For example, when reading uesr input using Scanner we will declare scanner as a static variable.\n- That way static methods can access it directly.\n\nInstance variables:\n\n- known as fields or member variables\n\n------\n\n#### Compostion\n\n------\n\n#### Encapsulation\n\npublic, private\n\n------\n\n#### Polymorphism\n\nTip: random int number\n\n```java\n// return 0~1 double number\nMath.random\n// generate random number between 1 to 5.\nint randomNum = (int)(Math.random*5)+1\n\n```\n\n------\n\n#### Array\n\n```java\nint[] myIntArray = new int[10];\nmyIntArray[5] = 50;\n// or\nint[] myIntArray = {1,2,3,4,5,6,7,8,9,0};\n// get length of array\nmyIntArray.length;\n\n//copy\nint[] sortedArray = Array.copyof(myIntArray, myIntArray.length);\n\n\n```\n\n","tags":["Java"]}]